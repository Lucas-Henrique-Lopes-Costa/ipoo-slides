---
title: IPOO - Relacionamentos de Classes
subtitle: Aula 6.1 - Teórica
---

## {.smaller}

Vai aí um conselho:

- Seu [desempenho]{.alert} como profissional **no futuro** *depende* de seu [empenho]{.alert} **agora**.
- Tome nota durante as aulas.
  - Foque no conteúdo e não no WhatsApp, TikTok, etc.


![](imagens/tomando_nota.png){.r-stretch}

## Principais Conceitos da Aula {.smaller}

Este é o único conteúdo da disciplina que não se encontra no livro-texto que estamos utilizando.

. . .

Nesta aula aprenderemos sobre [relacionamentos de classes]{.alert}.

- Veremos que podemos classificar a forma como os objetos de duas classes se relacionam.
  - Os relacionamentos podem ser de **composição**, **agregação** ou **associação**.
- Aprenderemos como esses relacionamentos podem ser tratados e/ou verificados no código-fonte dos nossos programas.


## {.smaller}

Nós já vimos que sistemas orientados a objetos se baseiam em **envio de mensagens**:

- Ou seja, um objeto pode **chamar métodos públicos** de objetos de outras classes.

. . .

:::: {.columns}

::: {.column width="50%"}

Nós dizemos que os **objetos se relacionam quando enviam mensagens** uns aos outros.

- Sistemas orientados a objetos dependem muito de como os objetos se relacionam.
- O planejamento/modelagem das classes se baseiam nesses relacionamentos.

:::

::: {.column width="50%"}
![](imagens/objetos-gostamos-de-comunicar.png){.r-stretch}
:::

::::

# Exemplos de relacionamentos {background-color="#40666e"}

## {.smaller}

Quais objetos vocês acham que podem existir em um software de um **caixa de supermercado**?

- Como você acha que esses objetos se relacionam?
- O que cada um tem a ver com o outro? Quem envia mensagem pra quem?

![](imagens/caixa_de_supermercado.png){.r-stretch}

. . .

Podemos pensar que existiriam, por exemplo, as classes:

- Produto, Vendedor e Compra.
- Uma compra pode ser formada por um conjunto de produtos e estar relacionada a um vendedor.

## {.smaller}

E quais objetos vocês acham que podem existir em um software como o **SIG**?

- Pense mais uma vez em como os objetos se relacionam. O que cada um tem a ver com o outro.

![](imagens/SIG_print.png){.r-stretch}

. . .

Podemos pensar que existiriam, por exemplo, as classes:

- Aluno, Disciplina, Turma, Curso, Professor, etc.
- Como cada objeto se relaciona com o outro?

## {.smaller}

Vamos a um último exemplo. Quais objetos poderiam existir em uma **plataforma de streaming** como a Netflix?

![](imagens/netflix.jpg){.r-stretch}

. . .

Posso pensar em classes como:

- Usuário, PerfilDeUsuário, Filmes, etc.
- Podemos pensar que um usuário possui vários perfis.
- Cada perfil possui um conjunto de filmes já vistos.
- E por aí vai...

## {.smaller}

Podemos perceber, portanto, que a grande maioria dos softwares orientados a  objetos dependem em grande parte de como os objetos se relacionam.

. . .

![](imagens/objetos_sem_problemas_relacionamento.png){.r-stretch}

## {.smaller}

![](imagens/balao_conhecer_tipos_relacionamentos.png){.r-stretch}

# Relacionamentos de Composição {background-color="#40666e"}

## {.smaller}

Vamos começar com um exemplo de classes `Carro` e `Motor`.

- Como podemos dizer que é o relacionamento entre os objetos das classes `Carro` e `Motor`?
  ![](imagens/partes_carro.jpg){.r-stretch}

. . .

Podemos dizer que **um carro** [tem um]{.alert} **motor**.

. . .

E quanto aos pneus? 

- De forma similar, podemos dizer que **um carro** [tem vários]{.alert} **pneus**.

## {.smaller}

Agora um novo exemplo, qual é o relacionamento entre os objetos de uma classe `Banco` e uma classe `Agencia`?

![](imagens/banco_do_brasil.png){.r-stretch}

. . .

Veja que  também podemos dizer que **um banco** [tem várias]{.alert} **agências**.

## {.smaller}

Por fim, qual o relacionamento entre os objetos de uma nota fiscal e os itens de compra que compõem a nota fiscal?

. . .

:::: {.columns}

::: {.column width="60%"}
![](imagens/nota_fiscal.png){.r-stretch}
:::

::: {.column width="40%"}
Mais uma vez, uma **nota fiscal** [tem vários]{.alert} **itens de compra**.
:::

::::

## {.smaller}

:::: {.columns}

::: {.column width="33%"}
![](imagens/partes_carro.jpg)
:::

::: {.column width="33%"}
![](imagens/banco_do_brasil.png)
:::

::: {.column width="33%"}
![](imagens/nota_fiscal.png)
:::

::::

. . .

Repare que os três exemplos têm em comum o fato de que **um objeto** [tem]{.alert} (um ou mais) **objetos de outra classe**.

. . .

Nós também podemos dizer que estes são relacionamentos do tipo [todo/parte]{.alert}.

- A classe que representa o todo [tem]{.alert} objetos da classe que representa a parte.

## {.smaller}

:::: {.columns}

::: {.column width="33%"}
![](imagens/partes_carro.jpg)
:::

::: {.column width="33%"}
![](imagens/banco_do_brasil.png)
:::

::: {.column width="33%"}
![](imagens/nota_fiscal.png)
:::

::::

. . .

Mas além disso, há outro fator importante. Repare que:

- Se não tenho um carro, não faz sentido criar as rodas.
- Se um banco faliu, não preciso mais de agências.
- Sem um pedido não tenho itens de pedido.

. . .

Nós dizemos então que, nestes casos, **o todo [controla o tempo de vida]{.alert} das partes**.

## {.smaller}

Nós chamamos esses casos de [Relacionamentos de Composição]{.alert}.

. . .

![](imagens/balao_composicao.png){.r-stretch}

## Composição - Exemplo de Código {.smaller}

Suponha que vamos implementar em Java um sistema que tenha as classes `Carro`, `Motor` e `Porta`.

- Nós vimos que esse é um exemplo de composição.
- Mas como isso pode ser implementado?

. . .

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
public class Carro {
    private Motor motor;
    private Porta[] portas;
    
    public Carro() {
        motor = new Motor();
        portas = new Porta[4];
        for (int i = 0; i < 4; i++) {
        	portas[i] = new Porta();
        }
    }
    // restante do código omitido
}
```
:::

## Composição - Exemplo de Código {.smaller}

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
public class Carro {
    private Motor motor;
    private Porta[] portas;
    
    public Carro() {
        motor = new Motor();
        portas = new Porta[4];
        for (int i = 0; i < 4; i++) {
        	portas[i] = new Porta();
        }
    }
    // restante do código omitido
}
```
:::

Como o motor e as portas são partes do carro, eles devem ser atributos do carro.

- E como qualquer atributo devem ser privados.

. . .

O carro controla o tempo de vida do motor e das portas, portanto é ele quem cria os objetos do motor e das portas.

## {.smaller}

[Atenção!]{.alert}

É importante que a classe que representa o todo **não tenha** um método de acesso que retorne uma **referência** para o(s) objeto(s) da(s) parte(s).

- Repare que, como nenhum outro objeto consegue ter uma referência para os objetos motor e portas, esses objetos só podem ser destruídos juntos com o carro. 
- Portanto o tempo de vida deles está completamente controlado pelo carro.

. . .

Caso essa regra não seja seguida haverá uma **quebra do encapsulamento**.

- Não adianta o motor ser declarado com visibilidade privada, se houver um método de acesso que retorne o motor.
- Por que, outra classe poderia usar esse método para ter acesso ao motor e chamar métodos modificadores do motor sem que a classe `Carro` tomasse conhecimento.

## Composição - Resumo {.smaller}

![](imagens/balao_resumo_composicao.png){.r-stretch}

# Relacionamentos de Agregação {background-color="#40666e"}

## {.smaller}

Vamos ver agora um outro tipo de relacionamento.

- Ele é parecido, mas é diferente ☺

## {.smaller}

Voltando nesse exemplo, qual seria o relacionamento entre os **produtos** e o **depósito**?

![](imagens/caixa_de_supermercado.png){.r-stretch}

. . .

- Um depósito [tem vários]{.alert} produtos.
- E um produto [é parte]{.alert} de um depósito.

. . .

Então, à primeira, vista parece uma composição, certo? 

## {.smaller}

Mas imagine essa situação:

![](imagens/balao_queima_de_estoque.png){.r-stretch}

. . .

Repare que os produtos **continuam existindo** ao deixarem o depósito, certo?

## {.smaller}

O fato é que os produtos podem sair do estoque e ir para as gôndolas.

- Além disso, podem existir produtos que vão direto para as gôndolas em alguma ocasião.
- Ou seja, o depósito **não controla** o tempo de vida dos produtos.

. . .

Dizendo de outra forma, [não é]{.alert} o todo **quem controla o tempo de vida** das partes.

. . .

Nós chamamos esse tipo de relacionamento de [agregação]{.alert}.

## Agregação - Exemplo de Código {.smaller}

Em um sistema de gestão escolar, podemos ter as classes `Departamento` e `Professor`.

- Como o departamento tem professores, os professores devem ser atributos do departamento.
- Mas se o departamento deixar de existir os professores continuam existindo. Ufa!!! ☺
- Portanto essa é uma relação de [agregação]{.alert}.

. . .

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
public class Departamento {
    private ArrayList<Professor> professores;

    public Departamento() {
        professores = new ArrayList<>();
    }
    
    public void contratarProfessor(Professor professor) {
        professores.add(professor);
    }

    // restante do código omitido
}
```
:::

## {.smaller}

Lembre-se que, em uma agregação, o todo **não controla o tempo de vida** das partes. 

. . .

Isso pode ficar explícito no código de duas formas:

- Não é a classe que representa o todo que cria o objeto da parte (como é o caso do exemplo anterior).
- E/ou, a classe do todo pode até criar a parte, mas ela tem algum método de acesso que retorna (o endereço da) a parte.
  - Permitindo que outras classes mantenham o objeto da parte, sem o conhecimento da classe que representa o todo.s

## {.smaller}

![](imagens/balao_diferenca_composicao_agregacao.png){.r-stretch}

## Agregação - Resumo {.smaller}

![](imagens/balao_resumo_associacao.png){.r-stretch}

# Relacionamentos de Associação {background-color="#40666e"}

## {.smaller}

Veremos agora o terceiro tipo de relacionamento:

- Suponha, por exemplo, que um professor que dá aulas particulares, resolva fazer um sistema para controlar suas atividades.
- Ele criou uma classe `Professor` e uma classe `Aluno`.
  - Qual é o relacionamento entre essas classes?

. . .

:::: {.columns}

::: {.column width="65%"}
- O professor dá aulas para o aluno e o aluno tem aulas com o professor.
- Mas não faz sentido dizer que o aluno é parte do professor ou que o professor é formado por alunos. 
- Portanto, **não é um relacionamento todo / parte**.
:::

::: {.column width="35%"}
![](imagens/professor_particular.jpg)
:::

::::

. . .

Nós chamamos esse tipo de relacionamento de [associação]{.alert}.

## Associação - Exemplo de Código {.smaller}

Vamos pensar no relacionamento entre as classes `Motorista`, `CarteiraDeMotorista` e `Carro`.

- Carteira de Motorista  não é parte de um motorista e nem o contrário. Portanto, é uma associação.
  - Mas elas têm um relacionamento baseado em propriedade. Um motorista possui uma CNH.
- Da mesma forma um carro não é parte de um motorista e nem o contrário. Portanto, também é uma associação.
  - Mas elas têm um relacionamento: um motorista viaja em um carro.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
public class Motorista {
    private CarteiraMotorista cnh;
	
    public void tirarCarteira(CarteiraMotorista cnh) 	
		this.cnh = cnh;
    }

    public void viajar(Carro carro, int distancia){
        ...
        carro.acelerar();
        ...
        carro.parar();
    }

    // restante do código omitido
}
```
:::

## {.smaller}

Repare que, no exemplo anterior, existem duas formas de implementação de associação.

- Uma através de atributo e outra não.
- O que importa no final das contas é que na associação um objeto chama métodos de outro.
  - Mas o relacionamento **não é todo/parte**.

## Resumo: Composição, Agregação e Associação {.smaller}

![](imagens/balao_resumo_relacionamentos.png){.r-stretch}

# Cuidado: relacionamentos dependem do contexto {background-color="#40666e"}

## {.smaller}

:::: {.columns}

::: {.column width="65%"}
![](imagens/game_of_thrones.jpeg)
:::

::: {.column width="35%"}
Em séries, como *Game of Thrones*, vemos que não é possível separar completamente os personagens em bons e maus, mocinhos e bandidos.

- Ou seja, ninguém é 100% bom ou 100% mau.
:::

::::

. . .

Da mesma forma, a **classificação** da relação (se é associação, agregação ou composição) **é relativa**.

- **Depende do contexto**.
